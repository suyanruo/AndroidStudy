apply plugin: 'com.android.application'

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    defaultConfig {
        applicationId "com.example.zj.androidstudy"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        manifestPlaceholders = [
                LAUNCH_ICON: "@mipmap/ic_learn"
        ]
    }
    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            manifestPlaceholders = [
                    FIREBASE_MESSAGE_CHANNEL_ID: "firebase_message_channel_release"
            ]
        }
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            manifestPlaceholders = [
                    FIREBASE_MESSAGE_CHANNEL_ID: "firebase_message_channel_debug"
            ]
        }
    }

    // Specifies the flavor dimensions you want to use. The order in which you
    // list each dimension determines its priority, from highest to lowest,
    // when Gradle merges variant sources and configurations. You must assign
    // each product flavor you configure to one of the flavor dimensions.
    flavorDimensions "api", "mode"

    productFlavors {
        demo {
            // Assigns this product flavor to the "mode" flavor dimension.
            dimension "mode"
        }

        full {
            dimension "mode"
        }

        // Configurations in the "api" product flavors override those in "mode"
        // flavors and the defaultConfig block. Gradle determines the priority
        // between flavor dimensions based on the order in which they appear next
        // to the flavorDimensions property above--the first dimension has a higher
        // priority than the second, and so on.
        minApi24 {
            dimension "api"
            minSdkVersion 24
            // To ensure the target device receives the version of the app with
            // the highest compatible API level, assign version codes in increasing
            // value with API level. To learn more about assigning version codes to
            // support app updates and uploading to Google Play, read Multiple APK Support
            versionCode 30000 + android.defaultConfig.versionCode
            versionNameSuffix "-minApi24"
        }

        minApi21 {
            dimension "api"
            minSdkVersion 21
            versionCode 20000  + android.defaultConfig.versionCode
            versionNameSuffix "-minApi21"
        }

        minApi16 {
            dimension "api"
            minSdkVersion 16
            versionCode 10000  + android.defaultConfig.versionCode
            versionNameSuffix "-minApi16"
        }
    }

    variantFilter { variant ->
        def names = variant.flavors*.name
        // To check for a certain build type, use variant.buildType.name == "<buildType>"
        if ((names.contains("minApi21") || names.contains("minApi24")) && names.contains("demo")) {
            // Gradle ignores any variants that satisfy the conditions above.
            setIgnore(true)
        }
    }


//    把 java 代码的访问路径设置成了 java 包和 aidl 包，这样一来系统就会到 aidl 包里面去查找 java 文件
//    sourceSets {
//        main {
//            java.srcDirs = ['src/main/java', 'src/main/aidl']
//        }
//    }

    // 保证百度地图开发包中拷贝需要的CPU架构对应的so文件文件夹可以在app/libs目录下使用
    sourceSets {
        main {
            jniLibs.srcDir 'libs'
        }
    }

    useLibrary 'org.apache.http.legacy'
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
//    implementation 'androidx.appcompat:appcompat:1.0.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation "androidx.legacy:legacy-support-v4:${rootProject.ext.androidxVersion}"
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'com.google.android.material:material:1.0.0'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:runner:1.1.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.0'
    implementation "com.google.android.material:material:${rootProject.ext.androidxVersion}"
    implementation "androidx.recyclerview:recyclerview:${rootProject.ext.androidxVersion}"
    implementation "androidx.cardview:cardview:${rootProject.ext.androidxVersion}"
    implementation "androidx.palette:palette:${rootProject.ext.androidxVersion}"

    implementation 'org.greenrobot:eventbus:3.1.1'

    // firebase
    implementation 'com.google.firebase:firebase-core:17.2.0'
    implementation 'com.google.firebase:firebase-messaging:20.0.0'

    implementation 'io.reactivex.rxjava2:rxjava:2.1.4'
    implementation 'io.reactivex.rxjava2:rxandroid:2.0.2'

    implementation 'com.github.tiagohm.MarkdownView:library:0.17.0'
}

buildscript {
    repositories {
        maven {
            //本地Maven仓库地址
            url uri('/Users/zhangjian/AndroidStudioProjects/GradleTest')
        }
    }
    dependencies {
        //格式为-->group:module:version
        classpath 'com.example.modulepluginlib:modulepluginlib:1.0.0'
    }
}

apply plugin: 'com.google.gms.google-services'

//com.test.gradle为resources/META-INF/gradle-plugins下的properties文件名称
apply plugin: 'com.example.modulepluginlib'
