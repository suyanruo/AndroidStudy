apply plugin: 'com.android.application'

apply plugin: 'com.google.gms.google-services'

// "com.example.modulepluginlib"为resources/META-INF/gradle-plugins下的properties文件名称
apply plugin: 'com.example.modulepluginlib'

// Apply the Crashlytics Gradle plugin
apply plugin: 'com.google.firebase.crashlytics'

apply plugin: "androidx.navigation.safeargs"

import org.aspectj.bridge.IMessage
import org.aspectj.bridge.MessageHandler
import org.aspectj.tools.ajc.Main

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    defaultConfig {
        applicationId "com.example.zj.androidstudy"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        manifestPlaceholders = [
                LAUNCH_ICON: "@mipmap/ic_learn"
        ]

        // 设置ndk打包哪些平台的so文件到apk中
//        ndk {
//            abiFilters "armeabi", "armeabi-v7a", 'arm64-v8a', "x86"
//        }
        multiDexEnabled true
    }
    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            manifestPlaceholders = [
                    FIREBASE_MESSAGE_CHANNEL_ID: "firebase_message_channel_release"
            ]
        }
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            manifestPlaceholders = [
                    FIREBASE_MESSAGE_CHANNEL_ID: "firebase_message_channel_debug"
            ]
        }
    }

    // Specifies the flavor dimensions you want to use. The order in which you
    // list each dimension determines its priority, from highest to lowest,
    // when Gradle merges variant sources and configurations. You must assign
    // each product flavor you configure to one of the flavor dimensions.
    flavorDimensions "api", "mode"

    productFlavors {
        demo {
            // Assigns this product flavor to the "mode" flavor dimension.
            dimension "mode"
        }

        full {
            dimension "mode"
        }

        // Configurations in the "api" product flavors override those in "mode"
        // flavors and the defaultConfig block. Gradle determines the priority
        // between flavor dimensions based on the order in which they appear next
        // to the flavorDimensions property above--the first dimension has a higher
        // priority than the second, and so on.
        minApi24 {
            dimension "api"
            minSdkVersion 24
            // To ensure the target device receives the version of the app with
            // the highest compatible API level, assign version codes in increasing
            // value with API level. To learn more about assigning version codes to
            // support app updates and uploading to Google Play, read Multiple APK Support
            versionCode 30000 + android.defaultConfig.versionCode
            versionNameSuffix "-minApi24"
        }

        minApi21 {
            dimension "api"
            minSdkVersion 21
            versionCode 20000 + android.defaultConfig.versionCode
            versionNameSuffix "-minApi21"
        }

        minApi19 {
            dimension "api"
            minSdkVersion 19
            versionCode 10000 + android.defaultConfig.versionCode
            versionNameSuffix "-minApi19"
        }
    }

    variantFilter { variant ->
        def names = variant.flavors*.name
        // To check for a certain build type, use variant.buildType.name == "<buildType>"
        if ((names.contains("minApi21") || names.contains("minApi24")) && names.contains("demo")) {
            // Gradle ignores any variants that satisfy the conditions above.
            setIgnore(true)
        }
    }

    // 保证百度地图开发包中拷贝需要的CPU架构对应的so文件文件夹可以在app/libs目录下使用
    sourceSets { //配置源码路径。这个sourceSets是Java插件引入
        main {
            manifest.srcFile 'src/main/AndroidManifest.xml' //这是一个函数，设置manifest.srcFile
            assets.srcDirs = ['src/main/assets', 'assets/']
            jniLibs.srcDirs = ['libs', 'jniLibs']
            jni {
                srcDirs 'src/main/jni'
            }
            // 把 java 代码的访问路径设置成了 java 包和 aidl 包，这样一来系统就会到 aidl 包里面去查找 java 文件
//            java.srcDirs = ['src/main/java', 'src/main/aidl']
        }
    }

    useLibrary 'org.apache.http.legacy'
}

dependencies {
    // dir:'libs'，表示搜索目录的名称是libs。include:['*.jar']，表示搜索目录下满足*.jar名字的jar
    implementation fileTree(dir: 'libs', include: ['*.jar'])
//    implementation 'androidx.appcompat:appcompat:1.0.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation "androidx.legacy:legacy-support-v4:${rootProject.androidxVersion}"
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'com.google.android.material:material:1.0.0'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:runner:1.1.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.0'
    implementation "com.google.android.material:material:${androidxVersion}"
    implementation "androidx.recyclerview:recyclerview:${androidxVersion}"
    implementation "androidx.cardview:cardview:${androidxVersion}"
    implementation "androidx.palette:palette:${rootProject.ext.androidxVersion}"

    implementation 'org.greenrobot:eventbus:3.1.1'

    // firebase
    implementation 'com.google.firebase:firebase-core:17.4.3'
    implementation 'com.google.firebase:firebase-messaging:20.2.0'

    implementation 'io.reactivex.rxjava2:rxjava:2.1.4'
    implementation 'io.reactivex.rxjava2:rxandroid:2.0.2'

    implementation 'com.github.tiagohm.MarkdownView:library:0.17.0'

    implementation 'com.squareup.okhttp3:okhttp:3.10.0'

    // AspectJ
    implementation 'org.aspectj:aspectjrt:1.8.10'

    // 64k
    implementation "androidx.multidex:multidex:${rootProject.ext.multidexVersion}"

    // Add the Firebase Crashlytics SDK.
    implementation 'com.google.firebase:firebase-crashlytics:17.0.1'

    // Recommended: Add the Firebase SDK for Google Analytics.
    implementation 'com.google.firebase:firebase-analytics:17.4.3'

    // Navigation
    implementation "androidx.navigation:navigation-fragment:2.3.0"
    implementation "androidx.navigation:navigation-ui:2.3.0"

    // Glide
    implementation "com.github.bumptech.glide:glide:4.11.0"
    annotationProcessor 'com.github.bumptech.glide:compiler:4.11.0'
}

// 如果只有app module使用MyPlugin，那么在当前gradle文件中引入，否则需要把Script Block放在根gradle文件中
//buildscript {
//    repositories {
//        maven {
//            //本地Maven仓库地址
//            url uri('../repo')
//        }
//    }
//    dependencies {
//        //格式为-->group:module:version
//        classpath 'com.example.modulepluginlib:modulepluginlib:1.0.0'
//    }
//}

// 来看如何动态生成runtime_config文件
def runtime_config_file = "$projectDir/src/main/assets/runtime_config"

/**
 *  我们在gradle解析完整个任务之后，找到对应的Task，然后在里边添加一个doFirst Action，这样能确保编译开始的时候，
 *  我们就把runtime_config文件准备好了。
 *  注意，必须在afterEvaluate里边才能做，否则gradle没有建立完任务有向图，你是找不到什么preDebugBuild之类的任务的
 */
project.afterEvaluate{
    println "projectDir: $projectDir\n rootDir: $rootDir\n"

    //找到preDebugBuild任务，然后添加一个Action
    tasks.find{
        if (it.name.endsWith("DebugGoogleServices")) {
            it.doFirst{
                def debugSourceFile = new File("$projectDir/src/debug/google-services.json")
                def targetFile = new File("$projectDir/google-services.json")
                def bytes = debugSourceFile.getBytes()
                targetFile.withOutputStream{os->
                    os << bytes
                }
            }
        }
    }

    tasks.find{
        if (it.name.endsWith("ReleaseGoogleServices")) {
            it.doFirst{
                def releaseSourceFile = new File("$projectDir/src/release/google-services.json")
                def targetFile = new File("$projectDir/google-services.json")
                def bytes = releaseSourceFile.getBytes()
                targetFile.withOutputStream{os->
                    os << bytes
                }
            }
        }
    }

    tasks.getByName("preMinApi19DemoDebugBuild"){
        it.doFirst{
            println "generate debug configuration for ${project.name}"
            def configFile = new File(runtime_config_file)
            configFile.withOutputStream{os->
                os << 'I am Debug\n'  //往配置文件里写 I am Debug
            }
        }
    }
    //找到preReleaseBuild任务
    tasks.getByName("preMinApi19DemoReleaseBuild"){
        it.doFirst{
            println "generate release configuration for ${project.name}"
            def configFile = new File(runtime_config_file)
            configFile.withOutputStream{os->
                os << 'I am release\n'
            }
        }
    }
}

/**
 * clean是一个Task的名字，这个Task好像是Java插件（这里是Android插件）引入的。
 * dependsOn是一个函数，下面这句话的意思是 clean任务依赖casCleanTask任务。
 * 所以当你gradle clean以执行clean Task的时候，casCleanTask也会执行
 */
clean.dependsOn 'casCleanTask'
//创建一个Task
task casCleanTask() {
    it.doLast {
        cleanOutput(true)  //cleanOutput是util.gradle中通过extra属性设置的Closure
    }
}

tasks.getByName("assemble") {
    it.doLast {
        println "$project.name: After assemble, jar libs are copied tolocal repository"
        project.ext.versionName = android.defaultConfig.versionName
        println "\t versionName = $versionName"
        copyOutput(false)  //copyOutput是util.gradle输出的closure
    }
}

final def log = project.logger
final def variants = project.android.applicationVariants

variants.all { variant ->
    if (!variant.buildType.isDebuggable()) {
        log.debug("Skipping non-debuggable build type '${variant.buildType.name}'.")
        return
    }

    JavaCompile javaCompile = variant.javaCompile
    javaCompile.doLast {
        String[] args = ["-showWeaveInfo",
                         "-1.8",
                         "-inpath", javaCompile.destinationDir.toString(),
                         "-aspectpath", javaCompile.classpath.asPath,
                         "-d", javaCompile.destinationDir.toString(),
                         "-classpath", javaCompile.classpath.asPath,
                         "-bootclasspath", project.android.bootClasspath.join(File.pathSeparator)]
        log.debug "ajc args: " + Arrays.toString(args)

        MessageHandler handler = new MessageHandler(true);
        new Main().run(args, handler);
        for (IMessage message : handler.getMessages(null, true)) {
            switch (message.getKind()) {
                case IMessage.ABORT:
                case IMessage.ERROR:
                case IMessage.FAIL:
                    log.error message.message, message.thrown
                    break;
                case IMessage.WARNING:
                    log.warn message.message, message.thrown
                    break;
                case IMessage.INFO:
                    log.info message.message, message.thrown
                    break;
                case IMessage.DEBUG:
                    log.debug message.message, message.thrown
                    break;
            }
        }
    }
}
