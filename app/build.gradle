apply plugin: 'com.android.application'

apply plugin: 'com.google.gms.google-services'

//com.test.gradle为resources/META-INF/gradle-plugins下的properties文件名称
apply plugin: 'com.example.modulepluginlib'

import org.aspectj.bridge.IMessage
import org.aspectj.bridge.MessageHandler
import org.aspectj.tools.ajc.Main

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    defaultConfig {
        applicationId "com.example.zj.androidstudy"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        manifestPlaceholders = [
                LAUNCH_ICON: "@mipmap/ic_learn"
        ]

        multiDexEnabled true
    }
    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            manifestPlaceholders = [
                    FIREBASE_MESSAGE_CHANNEL_ID: "firebase_message_channel_release"
            ]
        }
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            manifestPlaceholders = [
                    FIREBASE_MESSAGE_CHANNEL_ID: "firebase_message_channel_debug"
            ]
        }
    }

    // Specifies the flavor dimensions you want to use. The order in which you
    // list each dimension determines its priority, from highest to lowest,
    // when Gradle merges variant sources and configurations. You must assign
    // each product flavor you configure to one of the flavor dimensions.
    flavorDimensions "api", "mode"

    productFlavors {
        demo {
            // Assigns this product flavor to the "mode" flavor dimension.
            dimension "mode"
        }

        full {
            dimension "mode"
        }

        // Configurations in the "api" product flavors override those in "mode"
        // flavors and the defaultConfig block. Gradle determines the priority
        // between flavor dimensions based on the order in which they appear next
        // to the flavorDimensions property above--the first dimension has a higher
        // priority than the second, and so on.
        minApi24 {
            dimension "api"
            minSdkVersion 24
            // To ensure the target device receives the version of the app with
            // the highest compatible API level, assign version codes in increasing
            // value with API level. To learn more about assigning version codes to
            // support app updates and uploading to Google Play, read Multiple APK Support
            versionCode 30000 + android.defaultConfig.versionCode
            versionNameSuffix "-minApi24"
        }

        minApi21 {
            dimension "api"
            minSdkVersion 21
            versionCode 20000 + android.defaultConfig.versionCode
            versionNameSuffix "-minApi21"
        }

        minApi16 {
            dimension "api"
            minSdkVersion 16
            versionCode 10000 + android.defaultConfig.versionCode
            versionNameSuffix "-minApi16"
        }
    }

    variantFilter { variant ->
        def names = variant.flavors*.name
        // To check for a certain build type, use variant.buildType.name == "<buildType>"
        if ((names.contains("minApi21") || names.contains("minApi24")) && names.contains("demo")) {
            // Gradle ignores any variants that satisfy the conditions above.
            setIgnore(true)
        }
    }

    // 保证百度地图开发包中拷贝需要的CPU架构对应的so文件文件夹可以在app/libs目录下使用
    sourceSets {
        main {
            jniLibs.srcDir 'libs'
            // 把 java 代码的访问路径设置成了 java 包和 aidl 包，这样一来系统就会到 aidl 包里面去查找 java 文件
            // java.srcDirs = ['src/main/java', 'src/main/aidl']
        }
    }

    useLibrary 'org.apache.http.legacy'
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
//    implementation 'androidx.appcompat:appcompat:1.0.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation "androidx.legacy:legacy-support-v4:${rootProject.ext.androidxVersion}"
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'com.google.android.material:material:1.0.0'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:runner:1.1.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.0'
    implementation "com.google.android.material:material:${rootProject.ext.androidxVersion}"
    implementation "androidx.recyclerview:recyclerview:${rootProject.ext.androidxVersion}"
    implementation "androidx.cardview:cardview:${rootProject.ext.androidxVersion}"
    implementation "androidx.palette:palette:${rootProject.ext.androidxVersion}"

    implementation 'org.greenrobot:eventbus:3.1.1'

    // firebase
    implementation 'com.google.firebase:firebase-core:17.2.0'
    implementation 'com.google.firebase:firebase-messaging:20.0.0'

    implementation 'io.reactivex.rxjava2:rxjava:2.1.4'
    implementation 'io.reactivex.rxjava2:rxandroid:2.0.2'

    implementation 'com.github.tiagohm.MarkdownView:library:0.17.0'

    implementation 'com.squareup.okhttp3:okhttp:3.10.0'

    // AspectJ
    implementation 'org.aspectj:aspectjrt:1.8.10'

    // 64k
    implementation "androidx.multidex:multidex:${rootProject.ext.multidexVersion}"
}

buildscript {
    repositories {
        maven {
            //本地Maven仓库地址
            url uri('/Users/zhangjian/AndroidStudioProjects/GradleTest')
        }
    }
    dependencies {
        //格式为-->group:module:version
        classpath 'com.example.modulepluginlib:modulepluginlib:1.0.0'
    }
}

// 介于Initiliazation phase和Configuration phase之间，setting.gralde已执行完
gradle.beforeProject {
    println "execute before project configuration"
}

// 介于Configuration phase与Execution phase之间，各个module的build.gradle已经解析完毕，生成tasks执行顺序图
gradle.taskGraph.whenReady {
    println "taskGraph when ready function"
}

// 在Execution phase之后，tasks执行完成
gradle.buildFinished {
    println "build is finished"

    println "User Home Dir:" + gradle.gradleUserHomeDir
}

//clean是一个Task的名字，这个Task好像是Java插件（这里是Android插件）引入的。
//dependsOn是一个函数，下面这句话的意思是 clean任务依赖casCleanTask任务。所以
//当你gradle clean以执行clean Task的时候，casCleanTask也会执行
clean.dependsOn 'casCleanTask'
//创建一个Task
task casCleanTask() {
    it.doLast {
        cleanOutput(true)  //cleanOutput是util.gradle中通过extra属性设置的Closure
    }
}

tasks.getByName("assemble") {
    it.doLast {
        println "$project.name: After assemble, jar libs are copied tolocal repository"
        project.ext.versionName = android.defaultConfig.versionName
        println "\t versionName = $versionName"
        copyOutput(false)  //copyOutput是util.gradle输出的closure
    }
}

final def log = project.logger
final def variants = project.android.applicationVariants

variants.all { variant ->
    if (!variant.buildType.isDebuggable()) {
        log.debug("Skipping non-debuggable build type '${variant.buildType.name}'.")
        return
    }

    JavaCompile javaCompile = variant.javaCompile
    javaCompile.doLast {
        String[] args = ["-showWeaveInfo",
                         "-1.8",
                         "-inpath", javaCompile.destinationDir.toString(),
                         "-aspectpath", javaCompile.classpath.asPath,
                         "-d", javaCompile.destinationDir.toString(),
                         "-classpath", javaCompile.classpath.asPath,
                         "-bootclasspath", project.android.bootClasspath.join(File.pathSeparator)]
        log.debug "ajc args: " + Arrays.toString(args)

        MessageHandler handler = new MessageHandler(true);
        new Main().run(args, handler);
        for (IMessage message : handler.getMessages(null, true)) {
            switch (message.getKind()) {
                case IMessage.ABORT:
                case IMessage.ERROR:
                case IMessage.FAIL:
                    log.error message.message, message.thrown
                    break;
                case IMessage.WARNING:
                    log.warn message.message, message.thrown
                    break;
                case IMessage.INFO:
                    log.info message.message, message.thrown
                    break;
                case IMessage.DEBUG:
                    log.debug message.message, message.thrown
                    break;
            }
        }
    }
}
