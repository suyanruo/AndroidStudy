// Top-level build file where you can add configuration options common to all sub-projects/modules.

subprojects {
    println "Configure for $project.name" //遍历子Project，project变量对应每个子Project
    buildscript {
        ext {
            nav_version = "2.3.0-alpha01"
            kotlin_version = '1.3.72'
        }
        repositories {
            google()
            jcenter()
            maven {
                //本地Maven仓库地址
                url uri('../repo')
            }
        }
        dependencies {
            classpath 'com.android.tools.build:gradle:3.6.4'
            classpath 'com.google.gms:google-services:4.3.4'

            classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"

            classpath 'org.aspectj:aspectjtools:1.8.10'
            classpath 'org.aspectj:aspectjweaver:1.8.8'

            // Add the Crashlytics Gradle plugin.
            classpath 'com.google.firebase:firebase-crashlytics-gradle:2.1.1'

            classpath "androidx.navigation:navigation-safe-args-gradle-plugin:$nav_version"

            //格式为-->group:module:version
            classpath 'com.example.modulepluginlib:modulepluginlib:1.0.0'

            // NOTE: Do not place your application dependencies here; they belong
            // in the individual module build.gradle files
        }
        // 为每个子Project加载util.gradle。当然，这句话可以放到build script花括号之后
        // 当一个Project apply一个gradle文件的时候，这个gradle文件会转换成一个Script对象
        apply from: rootProject.getRootDir().getAbsolutePath() + "/util.gradle"
    }
}

// 介于Initiliazation phase和Configuration phase之间，setting.gralde已执行完
gradle.beforeProject {
    println "execute before project configuration"

    // Delete large build log files from ~/.gradle/daemon/X.X/daemon-XXX.out.log
    // Source: https://discuss.gradle.org/t/gradle-daemon-produces-a-lot-of-logs/9905
    def gradle = project.getGradle()
    new File("${gradle.getGradleUserHomeDir().getAbsolutePath()}/daemon/${gradle.getGradleVersion()}").listFiles().each {
        if (it.getName().endsWith('.out.log')) {
            println("Deleting gradle log file: $it") // Optional debug output
            // it.delete()
        }
    }
}

// 介于Configuration phase与Execution phase之间，各个module的build.gradle已经解析完毕，生成tasks执行顺序图
gradle.taskGraph.whenReady {
    println("taskGraph when ready function")
}

TaskExecutionGraph taskGraph = gradle.getTaskGraph()
taskGraph.whenReady {
    println "task whenReady"
}

// 在Execution phase之后，tasks执行完成
gradle.buildFinished {
    println "build is finished"
    println "Home Dir:" + gradle.gradleHomeDir
    println "User Home Dir:" + gradle.gradleUserHomeDir
}

/**
 * Gradle提供了一种名为extra property的方法。extra property是额外属性的意思，在第一次定义该属性的时候需要通过ext
 * 前缀来标示它是一个额外的属性。定义好之后，后面的存取就不需要ext前缀了。ext属性支持Project和Gradle对象。即Project
 * 和Gradle对象都可以设置ext属性
 */
ext {
    compileSdkVersion = 30
    targetSdkVersion = 30
    minSdkVersion = 19
    androidxVersion = "1.0.0"
    multidexVersion = "2.0.1"
    work_version = "2.5.0"
    lifecycle_version = "2.3.1"
}

allprojects {
    repositories {
        google()
        jcenter()
        maven { url 'https://jitpack.io' }
    }
}


task clean(type: Delete) {
    delete rootProject.buildDir
}

tasks.create(name: 'helloTask', group: 'build') {
    // 自定义task
}
